my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, nrow =4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- ("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10 <= 10
5 != 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE (6 > 4)
identical('twins', twins)
identical('twins', 'twins')
xor (5==6, !FALSE)
ints <- sample (10)
ints
ints > 5
which (ints > 7)
any (ints <0 )
all (ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
eval(function(x) {x+1}, 6)
eval(function(x){x+1}, 6)
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram ("You", "are", "late")
submit()
mad_libs(place = "Delhi", adjective = "terrible", noun = "security")
submit()
"I" %p% "love" %p% "R!"
d1<- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
unclass(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M"")
t4 <- strptime(t3, "%B %d, %Y %H:%M)
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
head(flags)
dim(flags)
cass(info)
class(info)
class(flgs)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
swirl()
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_colors, range)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lappy(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
unique_vals <- sapply(flags, unique)
sapply(flags, unique)
lappy(unique_vals, function(elem) elem[2])
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
ok()
sapply(flags, class)
vapply(flags, class, character (1))
?tapply
table (flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
?'>>'
??'>>'
?..
?':'
?>>
?'<<'
?'<<-'
makeVector <- function(x = numeric()){
m <- NULL
set <- function(y){
x<<-y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list (set = set, get = get, setmean = setmean, getmean = getmean)
}
cachemean <- funtion(x,...){
m <- x$getmean()
if(!is.null(m)){
message("getting cached data")
return (m)
}
data <- x$get()
m <- mean (data,...)
x$setmean(m)
m
}
makeVector <- function(x = numeric()){
m <- NULL
set <- function(y){
x<<-y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list (set = set, get = get, setmean = setmean, getmean = getmean)
}
cachemean <- function(x,...){
m <- x$getmean()
if(!is.null(m)){
message("getting cached data")
return (m)
}
data <- x$get()
m <- mean (data,...)
x$setmean(m)
m
}
cachemean(c(2,4,3))
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(2)
x <- 10
f1 <- function(x) {
function() {
x + 10
}
}
f1(1)
f1(1)()
x <- 10
f1 <- function(x) {
function() {
x + 10
}
}
x <- 10
f1 <- function(x) {
function() {
y<- x + 10
} x+y
}
x <- 10
f1 <- function(x) {
function() {
y <- x + 10
}
x+y
}
f(10)
f1(10)
f1(10)()
f1(10)(2)
f1(10)(2)
x <- 10
f1 <- function(x) {
function() {
x + 10
}
}
f1(10)
f1(10)()
f1(9)()
x <- 10
f1 <- function(x) {
function() {
y <- x + 10
y
}
}
c <- f1(2)
c()
x <- 10
f1 <- function(x) {
function() {
y <- x + 10
}
y
}
c <- f1(2)
x <- 2
g <- function() {
y <- 1
c(x, y)
}
g()
x <- 2
g <- function() {
y <- 1
c(x, y)
}
g()
x <- 2
g <- function() {
y <- 1
z <- c(x, y)
z
}
g()
x<- 2
y <-3
c(x,y)
z <- c(1,2)
c(2,3)
c(1,2)
x <- 2
g <- function() {
y <- 1
z <- c(x, y)
z
}
g()
x <- 2
g <- function() {
y <- 1
c(x, y)
}
g()
x <- 1
y <-3
z<- 4
h <- function() {
y <- 2
i <- function() {
z <- 3
c(x, y, z)
}
i()
}
h()
j <- function(x) {
y <- 2
function() {
c(x, y)
}
}
k <- j(1)
k()
makeVector <- function(x = numeric()){
m <- NULL
set <- function(y){
x<<-y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list (set = set, get = get, setmean = setmean, getmean = getmean)
}
myVector <- makeVector(1:15)
myVector
View(makeVector)
myVector$get()
x$get
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
check <- cachemean(myVector)
check
mean(1:15)
avector <- makeVector(2:5)
cachemean(myVector, avector)
cachemean(avector)
cachemean(avector)
cachemean(avector)
x <- matrix()
x
setwd("C:/Users/anuradha.kumari/Data-Science-Course")
makeCacheMatrix <- function(x = matrix()){
i <<- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function () x
setmean <- function(inverse) i <<- inverse
getmean <- function() i
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
cacheSolve <- function(m,...){
i <- m$getmean()
if(!is.null(i)){
message("geeting from cache")
return (i)
}
data <- m$get()
i <- solve(data)
m$setmean(i)
i
}
matrix(c(2,4), c(3,3))
matrix(c(2,4,3,3), nrow = 2)
check <- matrix(c(2,4,3,3), nrow = 2)
solve(check)
myMatrix <- makeCacheMatrix(check)
cacheSolve(myMatrix)
check <- matrix(c(2,4,5,3,4,8), nrow = 3)
check <- matrix(c(2,4,3,3), nrow = 2)
check2 <- matrix(c(2,4,5,3,4,8), nrow = 3)
myMatrix2 <- makeCacheMatrix(check2)
cacheSolve(myMatrix2)
check2 <- matrix(c(2,4,5,3,4,8, 7, 4, 5), nrow = 3)
myMatrix2 <- makeCacheMatrix(check2)
cacheSolve(myMatrix2)
cacheSolve(myMatrix)
makeCacheMatrix <- function(x = matrix()){
i <<- NULL
set <- function(y) {
i <<- NULL
}
get <- function () x
setmean <- function(inverse) i <<- inverse
getmean <- function() i
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
cacheSolve <- function(m,...){
i <- m$getmean()
if(!is.null(i)){
message("geeting from cache")
return (i)
}
data <- m$get()
i <- solve(data)
m$setmean(i)
i
}
myMatrix2 <- makeCacheMatrix(check2)
cacheSolve(myMatrix2)
cacheSolve(myMatrix)
cacheSolve(myMatrix2)
gl(40,10)
swirl()
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample (1:6, 4, replace = TRUE)
sample (1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(0:1, 100, prob = c(0.3, 0.7))
sample(0:1, 100, prob = c(0.3, 0.7), replace = TRUE)
sample(c(0,1), 100, prob = c(0.3, 0.7), replace = TRUE)
flips <- sample(c(0,1), 100, prob = c(0.3, 0.7), replace = TRUE)
flips
sum(flips == 1)
sum(flips)
?rbinom
rbinom(1, size =100, prob = 0,7)
rbinom(1, size =100, prob = 0.7)
flips2 <- rbinom (100, size =1, prob = 0.7)
flips2
sum(flips)
sum(flips2)
play()
rbinom (100, size =2, prob = 0.7)
rbinom (100, size =5, prob = 0.7)
nxt()
?rnorm()
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5, 10)
replicate(100, rpois(5,10))
my_ poisreplicate(100, rpois(5,10))
my_ pois<-replicate(100, rpois(5,10))
my_pois<-replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(Cars)
head(cars)
plot(cars)
?plot
play()
methods(plot)
nxt()
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist,  ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col =2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot( mpg ~ cyl, data = mtcars)
hist (mtcars$mpg)
